// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`render password input with icon 1`] = `
<View
  style={
    [
      {
        "backgroundColor": "#fff",
      },
      undefined,
    ]
  }
>
  <View
    style={
      [
        {
          "backgroundColor": "#fff",
        },
        {
          "position": "relative",
        },
      ]
    }
  >
    <TextInput
      keyboardType="default"
      onChangeText={[MockFunction]}
      placeholder="fake value"
      secureTextEntry={true}
      style={
        {
          "borderColor": "#d1d3d9",
          "borderRadius": 30,
          "borderWidth": 1,
          "fontFamily": "SatoshiRegular",
          "fontSize": 17,
          "marginVertical": 24,
          "paddingLeft": 55,
          "paddingRight": 40,
          "paddingVertical": 15,
        }
      }
      value="fake value"
    />
    <View
      style={
        [
          {
            "backgroundColor": "#fff",
          },
          {
            "left": 22,
            "position": "absolute",
            "top": 43,
          },
        ]
      }
    />
  </View>
  <View
    style={
      [
        {
          "backgroundColor": "#fff",
        },
        {
          "backgroundColor": "transparent",
          "position": "absolute",
          "right": 12,
          "top": 25,
        },
      ]
    }
  >
    <View
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": undefined,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
    >
      <ViewManagerAdapter_ExpoImage
        contentFit="cover"
        contentPosition={
          {
            "left": "50%",
            "top": "50%",
          }
        }
        height={60}
        onError={[Function]}
        onLoad={[Function]}
        onLoadStart={[Function]}
        onProgress={[Function]}
        placeholder={[]}
        source={[]}
        style={
          {
            "height": 60,
            "width": 60,
          }
        }
        transition={null}
        width={60}
      />
    </View>
  </View>
</View>
`;
